
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256) 


#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload // []
  0xe0 shr          // [selector]
  __FUNC_SIG(multiply) eq multiply jumpi
  0x00 0x00 revert
  multiply:
    MULTIPLY()

}

#define macro MULTIPLY() = takes(0) returns(0) {
  0x04 calldataload // [val1]
  dup1 iszero 0x00 eq proceed jumpi
  0x00 mstore
  0x20 0x00 return
  proceed:
    0x24 calldataload // [val2, val1]
    dup1 iszero 0x00 eq proceed2 jumpi
    0x00 mstore
    0x20 0x00 return

  proceed2:
    dup2 dup2         // [val2, val1, val2, val1]
    mul               // [product, val2, val1]
    dup1 swap3 dup2   // [product, val1, product,val2, product]
    gt                // [truthy, product,val2, product]
    first jumpi        // [product,val2, product]
    0x00 0x00 revert

  first:
    gt                // [truthy, product]
    pass jumpi        // [product]
    0x00 0x00 revert

  pass:
    0x00 mstore       // [product]
    0x20 0x00         // [0,20]
    return 
} 